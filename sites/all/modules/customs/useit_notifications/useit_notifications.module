<?php
/**
 * Implements hook_cron().
 */
function 1useit_notifications_cron() {
  /*
   *  // Short-running operation example, not using a queue:
   *  // Delete all expired records since the last cron run.
   *  $expires = variable_get('mymodule_cron_last_run', REQUEST_TIME);
   *  db_delete('mymodule_table')
   *    ->condition('expires', $expires, '>=')
   *    ->execute();
   *  variable_set('mymodule_cron_last_run', REQUEST_TIME);
   *
   *  // Long-running operation example, leveraging a queue:
   *  // Fetch feeds from other sites.
   *  $result = db_query('SELECT * FROM {aggregator_feed} WHERE checked + refresh < :time AND refresh != :never', array(
   *    ':time' => REQUEST_TIME,
   *    ':never' => AGGREGATOR_CLEAR_NEVER,
   *  ));
   *  $queue = DrupalQueue::get('aggregator_feeds');
   *  foreach ($result as $feed) {
   *    $queue->createItem($feed);
   *  }
   */
   /* Your code here */
   //send email to class.
   1useit_notifications_class();
}

/**
 * Post test message
 * @see messaging_admin_test_post_form_submit
 */
function 1useit_notifications_class() {
  $notification_class = views_get_view_result('notification_class');
  foreach ($notification_class as $key => $value) {
    $node = $value->_field_data['nid']['entity'];
    if(isset($node->field_notificationed[LANGUAGE_NONE][0]['value']) && $node->field_notificationed[LANGUAGE_NONE][0]['value']) continue;
    // $nodes[] = $node;
      // param begin
      $subject = '1userit上课提醒';
      $body['header'] = 'Hello admin,';
      $body['content'] = '您在1userit上预约的英语口语课程即将在'.$node->field_date[LANGUAGE_NONE][0]['value'].'开始，'.$node->field_date[LANGUAGE_NONE][0]['value2'].'结束。请届时登录1userit参加网上课堂。'.l($node->title,'node/'.$node->nid);
      $body['footer'] = 'This is a test message from 1UseIt. 系统发送，请勿直接回复，如有疑问，请service@1userit.com!';
      $address = $node->field_student[LANGUAGE_NONE][0]['uid'];
      // if($address ==3) continue;
      // dpm($address);
      //end
   // Convert body in array of lines
    $body = array_map('trim', $body);
    $method = 'mail';

    $message = messaging_message_build(array(
      'type' => 'test',
      'subject' =>    $subject,
      'header' => $body['header'],
      'content' => $body['content'],
      'footer' => $body['footer'],
      'method' => $method,
      'priority' => 1, // So it won't be queued
    ));
    
    // Destination may be account or plain parameter/s
    // $address = 'admin';
    $send_method = messaging_send_method($method);
    
    if ($account = user_load($address)) {
      $vars['!name'] = theme('username', array('account' => $account));
      $message->set_user($account);
      if ($dest = $message->get_destinations()) {
        $destination = reset($dest);
        // drupal_set_message(t('Found address @address for user !name', array('@address' => $destination->format('long')) + $vars));
        watchdog('useit_notifications', t('Found address @address for user !name', array('@address' => $destination->format('long')) + $vars), array(), WATCHDOG_NOTICE, 'link');
        $result = $message->send();
      }
      else {
        watchdog('useit_notifications', t('Cannot find a valid address for user !name', $vars), array(), WATCHDOG_NOTICE, 'link');
        // drupal_set_message(t('Cannot find a valid address for user !name', $vars), 'error');
      }
      
    } elseif ($destination = $send_method->address_destination($address, TRUE)) {
      // drupal_set_message(t('Sending message to address: @address', array('@address' => $address)));
      watchdog('useit_notifications', t('Sending message to address: @address', array('@address' => $address)), array(), WATCHDOG_NOTICE, 'link');
      $result = $message->add_destination($destination)->send();
    }
    else {
      // drupal_set_message(t('The destination is not a user name nor a valid address.'), 'error');
    }
    if (isset($result)) {
      if ($result) {
        $node->field_notificationed[LANGUAGE_NONE][0]['value'] = 1;
        node_save($node);
        watchdog('useit_notifications', t('The message was sent successfully.'), array(), WATCHDOG_NOTICE, 'link');
        // drupal_set_message(t('The message was sent successfully.'));
      }
      else {
        // drupal_set_message(t('The message sending failed.'), 'warning');
      }
    }
    // Check some conditions and let the user know
    if (!$send_method->enabled) {
      watchdog('useit_notifications', t('This sending method is disabled, thus regular messages will be discarded.'), array(), WATCHDOG_NOTICE, 'link');
      // drupal_set_message(t('This sending method is disabled, thus regular messages will be discarded.'), 'warning');
    }
  }
}